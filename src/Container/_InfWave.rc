#undef  _Base
#define _Base MyBase(_C(CDSP2_Wave, _, _T1))

#undef  _AddMethod
#define _AddMethod(Name) \
    RInterface_AddMethod(_C(CDSP2_IWave_, _T1, _, Name), \
                         _C(CDSP2_InfWave_, _T1, _, Name), _RTClassName)

RCtor(_RTClassName)
{
    _C(CDSP2_Wave_, _T1, _Ctor)(_Base);
    This -> VPosition = 0;
    This -> SPosition = 0;
    RInit(_RTClassName);
}

RDtor(_RTClassName)
{
    _C(CDSP2_Wave_, _T1, _Dtor)(_Base);
}

RTMethod(static int, CDSP_InfWave, VBoundCheck, int VPosition)
{
    //Left edge
    if(VPosition < This -> VPosition)
        return 0;
    //Right edge
    if(VPosition > This -> VPosition + _Base -> Size)
        return 0;
    return 1;
}

//*** CtorSize ***
RTMethod(void, CDSP2_InfWave, CtorSize, int Size)
{
    _C(CDSP2_Wave_, _T1, _CtorSize)(_Base, Size);
    RInit(_RTClassName);
}

//*** Resize ***
RTMethod(void, CDSP2_InfWave, Resize, int Size)
{
    _C(CDSP2_Wave_, _T1, _Resize)(_Base, Size);
}
_AddMethod(Resize);

//*** Relocate ***
RTMethod(int, CDSP2_InfWave, Relocate, int VPosition)
{
    This -> VPosition = VPosition;
    This -> SPosition = VPosition;
}

//*** Submit ***
RTMethod(int, CDSP2_InfWave, Submit, int VPosition)
{
    if(VPosition < This -> SPosition)
        return 0;
    if(! RCall(_RTClassName, VBoundCheck)(This, VPosition))
        return 0;
    This -> SPosition = VPosition;
    return 1;
}

//*** SetWindow ***
RTMethod(void, CDSP2_InfWave, SetWindow, _T1* Sorc, int Size)
{
    _C(CDSP2_Wave_, _T1, _SetWindow)(This, Sorc, Size);
}
_AddMethod(SetWindow);

//*** Dump ***
RTMethod(int, CDSP2_InfWave, Dump, _T1* Dest)
{
    int i;
    int Length = This -> SPosition - This -> VPosition;
    //Dump
    RCall(CDSP2_VCopy, _T1)(Dest, _Base -> Data, Length);
    //Restore TODO:SIMDlize
    for(i = This -> SPosition; i < This -> VPosition + _Base -> Size; i ++)
        _Base -> Data[i - This -> SPosition] = 
            _Base -> Data[i - This -> VPosition];
    This -> VPosition = This -> SPosition;
    
    return Length;
}

#undef  _IOWrap
#define _IOWrap \
    if(! RCall(_RTClassName, VBoundCheck)(This, LVPosition)) \
        return 0; \
    int LBound = LVPosition - This -> VPosition; \
    /*Right edge*/ \
    if(LBound + Size > _Base -> Size) \
        return 0;

//*** Read ***
RTMethod(int, CDSP2_InfWave, Read, _T1* Dest, int LVPosition, int Size)
{
    _IOWrap
    _C(CDSP2_Wave_, _T1, _Read)(_Base, Dest, LBound, Size);
    return 1;
}
_AddMethod(Read);

//*** Write ***
RTMethod(int, CDSP2_InfWave, Write, _T1* Sorc, int LVPosition, int Size)
{
    _IOWrap
    _C(CDSP2_Wave_, _T1, _Write)(_Base, Sorc, LBound, Size);
    return 1;
}
_AddMethod(Write);

//*** Add ***
RTMethod(int, CDSP2_InfWave, Add, _T1* Sorc, int LVPosition, int Size)
{
    _IOWrap
    _C(CDSP2_Wave_, _T1, _Add)(_Base, Sorc, LBound, Size);
    return 1;
}
_AddMethod(Add);

//*** WRead ***
RTMethod(int, CDSP2_InfWave, WRead, _T1* Dest, int LVPosition)
{
    int Size = _Base -> WinSize;
    _IOWrap
    _C(CDSP2_Wave_, _T1, _WRead)(_Base, Dest, LBound);
    return 1;
}
_AddMethod(WRead);

//*** WWrite ***
RTMethod(int, CDSP2_InfWave, WWrite, _T1* Sorc, int LVPosition)
{
    int Size = _Base -> WinSize;
    _IOWrap
    _C(CDSP2_Wave_, _T1, _WWrite)(_Base, Sorc, LBound);
    return 1;
}
_AddMethod(WWrite);

//*** WAdd ***
RTMethod(int, CDSP2_InfWave, WAdd, _T1* Sorc, int LVPosition)
{
    int Size = _Base -> WinSize;
    _IOWrap
    _C(CDSP2_Wave_, _T1, _WAdd)(_Base, Sorc, LBound);
    return 1;
}
_AddMethod(WAdd);

